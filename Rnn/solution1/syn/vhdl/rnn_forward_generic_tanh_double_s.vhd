-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rnn_forward_generic_tanh_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of rnn_forward_generic_tanh_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4036000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110110000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_3C8 : STD_LOGIC_VECTOR (10 downto 0) := "01111001000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3E4 : STD_LOGIC_VECTOR (10 downto 0) := "01111100100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_3E5 : STD_LOGIC_VECTOR (10 downto 0) := "01111100101";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal expx_reg_60_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal expx_reg_60_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal expx_reg_60_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_144 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_pred209_state41 : BOOLEAN;
    signal ap_predicate_pred219_state41 : BOOLEAN;
    signal din_sign_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_fu_162_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_reg_369 : STD_LOGIC_VECTOR (10 downto 0);
    signal t_fu_180_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_reg_374 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_379_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_379_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_379_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_379_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_389_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_393_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_397_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_401_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_406_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_410_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_3_fu_245_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_3_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln9_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_432_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_436_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_exp_generic_double_s_fu_89_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln66_fu_326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln66_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln66_1_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln38_fu_336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_exp_generic_double_s_fu_89_ap_start : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_done : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_idle : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_ready : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_ce : STD_LOGIC;
    signal ap_predicate_op101_call_state7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp101 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter10_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter11_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter12_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter13_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter14_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter15_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter16_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter17_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter18_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter19_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred867_state19 : BOOLEAN;
    signal ap_phi_mux_resultf_3_phi_fu_76_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter0_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter10_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter11_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter12_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter13_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter14_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter15_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter16_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter17_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter18_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter19_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter20_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter21_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter22_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter23_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter24_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter25_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter26_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter27_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter28_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter29_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter30_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter31_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter32_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter33_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter34_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter35_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter36_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter37_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter38_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter39_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter40_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter41_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter42_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter43_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter44_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter45_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred1033_state42 : BOOLEAN;
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_exp_generic_double_s_fu_89_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op101_call_state7_state6 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_105_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred1155_state25 : BOOLEAN;
    signal ap_predicate_pred1160_state25 : BOOLEAN;
    signal data_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln479_fu_176_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal din_sig_fu_172_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln46_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_235_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_1_fu_264_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln9_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sign_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln66_fu_322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln83_fu_347_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_1_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_ce : STD_LOGIC;
    signal grp_fu_105_ce : STD_LOGIC;
    signal grp_fu_109_ce : STD_LOGIC;
    signal grp_fu_113_ce : STD_LOGIC;
    signal grp_fu_118_ce : STD_LOGIC;
    signal grp_fu_124_ce : STD_LOGIC;
    signal grp_fu_130_ce : STD_LOGIC;
    signal grp_fu_134_ce : STD_LOGIC;
    signal grp_fu_139_ce : STD_LOGIC;
    signal ap_predicate_op63_dcmp_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to44 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1020 : BOOLEAN;
    signal ap_condition_820 : BOOLEAN;
    signal ap_condition_856 : BOOLEAN;
    signal ap_condition_1068 : BOOLEAN;
    signal ap_condition_788 : BOOLEAN;
    signal ap_condition_1003 : BOOLEAN;
    signal ap_condition_1015 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component rnn_forward_exp_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rnn_forward_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rnn_forward_dsub_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rnn_forward_dmul_64ns_64ns_64_5_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rnn_forward_ddiv_64ns_64ns_64_17_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component rnn_forward_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_exp_generic_double_s_fu_89 : component rnn_forward_exp_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_generic_double_s_fu_89_ap_start,
        ap_done => grp_exp_generic_double_s_fu_89_ap_done,
        ap_idle => grp_exp_generic_double_s_fu_89_ap_idle,
        ap_ready => grp_exp_generic_double_s_fu_89_ap_ready,
        ap_ce => grp_exp_generic_double_s_fu_89_ap_ce,
        x => x_3_reg_425,
        ap_return => grp_exp_generic_double_s_fu_89_ap_return);

    dadd_64ns_64ns_64_5_full_dsp_1_U15 : component rnn_forward_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abst_in_fu_188_p1,
        din1 => ap_const_lv64_3FF0000000000000,
        ce => grp_fu_100_ce,
        dout => grp_fu_100_p2);

    dsub_64ns_64ns_64_5_full_dsp_1_U16 : component rnn_forward_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_105_p0,
        din1 => abst_in_reg_379,
        ce => grp_fu_105_ce,
        dout => grp_fu_105_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U17 : component rnn_forward_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abst_in_reg_379,
        din1 => abst_in_reg_379,
        ce => grp_fu_109_ce,
        dout => grp_fu_109_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U18 : component rnn_forward_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_445,
        din1 => ap_const_lv64_BFF0000000000000,
        ce => grp_fu_113_ce,
        dout => grp_fu_113_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U19 : component rnn_forward_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter19_expx_reg_60,
        din1 => ap_const_lv64_4000000000000000,
        ce => grp_fu_118_ce,
        dout => grp_fu_118_p2);

    dsub_64ns_64ns_64_5_full_dsp_1_U20 : component rnn_forward_dsub_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => reg_144,
        ce => grp_fu_124_ce,
        dout => grp_fu_124_p2);

    dmul_64ns_64ns_64_5_max_dsp_1_U21 : component rnn_forward_dmul_64ns_64ns_64_5_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abst_in_reg_379_pp0_iter4_reg,
        din1 => add_reg_420,
        ce => grp_fu_130_ce,
        dout => grp_fu_130_p2);

    ddiv_64ns_64ns_64_17_no_dsp_1_U22 : component rnn_forward_ddiv_64ns_64ns_64_17_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 17,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_134_p0,
        din1 => add2_reg_455,
        ce => grp_fu_134_ce,
        dout => grp_fu_134_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U23 : component rnn_forward_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abst_in_fu_188_p1,
        din1 => ap_const_lv64_4036000000000000,
        ce => grp_fu_139_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_139_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_generic_double_s_fu_89_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_call_state7_state6 = ap_const_boolean_1))) then 
                    grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_generic_double_s_fu_89_ap_ready = ap_const_logic_1)) then 
                    grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter10_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_820)) then
                if ((ap_const_boolean_1 = ap_condition_1020)) then 
                    ap_phi_reg_pp0_iter10_resultf_3_reg_72 <= grp_fu_130_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter10_resultf_3_reg_72 <= ap_phi_reg_pp0_iter9_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter19_expx_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_856)) then
                if ((ap_predicate_pred867_state19 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter19_expx_reg_60 <= grp_fu_113_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter19_expx_reg_60 <= ap_phi_reg_pp0_iter18_expx_reg_60;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_788)) then
                if ((ap_const_boolean_1 = ap_condition_1068)) then 
                    ap_phi_reg_pp0_iter2_resultf_3_reg_72 <= ap_const_lv64_3FF0000000000000;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_resultf_3_reg_72 <= ap_phi_reg_pp0_iter1_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter42_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1003)) then
                if ((ap_predicate_pred1033_state42 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter42_resultf_3_reg_72 <= reg_144;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter42_resultf_3_reg_72 <= ap_phi_reg_pp0_iter41_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter45_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1015)) then
                if ((icmp_ln36_reg_389_pp0_iter43_reg = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter45_resultf_3_reg_72 <= select_ln38_fu_336_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter45_resultf_3_reg_72 <= ap_phi_reg_pp0_iter44_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter6_expx_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_2_reg_406_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln45_reg_393_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln10_1_fu_316_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_0 = and_ln9_1_fu_292_p2) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_2_reg_406_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln45_reg_393_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln9_1_fu_292_p2) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                ap_phi_reg_pp0_iter6_expx_reg_60 <= x_3_fu_245_p3;
            elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter6_expx_reg_60 <= ap_phi_reg_pp0_iter5_expx_reg_60;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    abst_in_reg_379(62 downto 0) <= abst_in_fu_188_p1(62 downto 0);
                    abst_in_reg_379_pp0_iter1_reg(62 downto 0) <= abst_in_reg_379(62 downto 0);
                and_ln46_reg_397 <= and_ln46_fu_218_p2;
                and_ln46_reg_397_pp0_iter1_reg <= and_ln46_reg_397;
                din_exp_reg_369 <= data_fu_150_p1(62 downto 52);
                din_sign_reg_364 <= data_fu_150_p1(63 downto 63);
                din_sign_reg_364_pp0_iter1_reg <= din_sign_reg_364;
                icmp_ln36_reg_389 <= icmp_ln36_fu_194_p2;
                icmp_ln36_reg_389_pp0_iter1_reg <= icmp_ln36_reg_389;
                icmp_ln38_reg_401 <= icmp_ln38_fu_224_p2;
                icmp_ln38_reg_401_pp0_iter1_reg <= icmp_ln38_reg_401;
                icmp_ln45_reg_393 <= icmp_ln45_fu_200_p2;
                icmp_ln45_reg_393_pp0_iter1_reg <= icmp_ln45_reg_393;
                icmp_ln54_reg_410 <= icmp_ln54_fu_230_p2;
                    t_reg_374(62 downto 0) <= t_fu_180_p3(62 downto 0);
                tmp_2_reg_406 <= grp_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    abst_in_reg_379_pp0_iter2_reg(62 downto 0) <= abst_in_reg_379_pp0_iter1_reg(62 downto 0);
                    abst_in_reg_379_pp0_iter3_reg(62 downto 0) <= abst_in_reg_379_pp0_iter2_reg(62 downto 0);
                    abst_in_reg_379_pp0_iter4_reg(62 downto 0) <= abst_in_reg_379_pp0_iter3_reg(62 downto 0);
                add2_reg_455 <= grp_fu_118_p2;
                add_reg_420 <= grp_fu_100_p2;
                and_ln10_1_reg_436 <= and_ln10_1_fu_316_p2;
                and_ln10_1_reg_436_pp0_iter10_reg <= and_ln10_1_reg_436_pp0_iter9_reg;
                and_ln10_1_reg_436_pp0_iter11_reg <= and_ln10_1_reg_436_pp0_iter10_reg;
                and_ln10_1_reg_436_pp0_iter12_reg <= and_ln10_1_reg_436_pp0_iter11_reg;
                and_ln10_1_reg_436_pp0_iter13_reg <= and_ln10_1_reg_436_pp0_iter12_reg;
                and_ln10_1_reg_436_pp0_iter14_reg <= and_ln10_1_reg_436_pp0_iter13_reg;
                and_ln10_1_reg_436_pp0_iter15_reg <= and_ln10_1_reg_436_pp0_iter14_reg;
                and_ln10_1_reg_436_pp0_iter16_reg <= and_ln10_1_reg_436_pp0_iter15_reg;
                and_ln10_1_reg_436_pp0_iter6_reg <= and_ln10_1_reg_436;
                and_ln10_1_reg_436_pp0_iter7_reg <= and_ln10_1_reg_436_pp0_iter6_reg;
                and_ln10_1_reg_436_pp0_iter8_reg <= and_ln10_1_reg_436_pp0_iter7_reg;
                and_ln10_1_reg_436_pp0_iter9_reg <= and_ln10_1_reg_436_pp0_iter8_reg;
                and_ln46_reg_397_pp0_iter10_reg <= and_ln46_reg_397_pp0_iter9_reg;
                and_ln46_reg_397_pp0_iter11_reg <= and_ln46_reg_397_pp0_iter10_reg;
                and_ln46_reg_397_pp0_iter12_reg <= and_ln46_reg_397_pp0_iter11_reg;
                and_ln46_reg_397_pp0_iter13_reg <= and_ln46_reg_397_pp0_iter12_reg;
                and_ln46_reg_397_pp0_iter14_reg <= and_ln46_reg_397_pp0_iter13_reg;
                and_ln46_reg_397_pp0_iter15_reg <= and_ln46_reg_397_pp0_iter14_reg;
                and_ln46_reg_397_pp0_iter16_reg <= and_ln46_reg_397_pp0_iter15_reg;
                and_ln46_reg_397_pp0_iter17_reg <= and_ln46_reg_397_pp0_iter16_reg;
                and_ln46_reg_397_pp0_iter18_reg <= and_ln46_reg_397_pp0_iter17_reg;
                and_ln46_reg_397_pp0_iter19_reg <= and_ln46_reg_397_pp0_iter18_reg;
                and_ln46_reg_397_pp0_iter20_reg <= and_ln46_reg_397_pp0_iter19_reg;
                and_ln46_reg_397_pp0_iter21_reg <= and_ln46_reg_397_pp0_iter20_reg;
                and_ln46_reg_397_pp0_iter22_reg <= and_ln46_reg_397_pp0_iter21_reg;
                and_ln46_reg_397_pp0_iter23_reg <= and_ln46_reg_397_pp0_iter22_reg;
                and_ln46_reg_397_pp0_iter24_reg <= and_ln46_reg_397_pp0_iter23_reg;
                and_ln46_reg_397_pp0_iter25_reg <= and_ln46_reg_397_pp0_iter24_reg;
                and_ln46_reg_397_pp0_iter26_reg <= and_ln46_reg_397_pp0_iter25_reg;
                and_ln46_reg_397_pp0_iter27_reg <= and_ln46_reg_397_pp0_iter26_reg;
                and_ln46_reg_397_pp0_iter28_reg <= and_ln46_reg_397_pp0_iter27_reg;
                and_ln46_reg_397_pp0_iter29_reg <= and_ln46_reg_397_pp0_iter28_reg;
                and_ln46_reg_397_pp0_iter2_reg <= and_ln46_reg_397_pp0_iter1_reg;
                and_ln46_reg_397_pp0_iter30_reg <= and_ln46_reg_397_pp0_iter29_reg;
                and_ln46_reg_397_pp0_iter31_reg <= and_ln46_reg_397_pp0_iter30_reg;
                and_ln46_reg_397_pp0_iter32_reg <= and_ln46_reg_397_pp0_iter31_reg;
                and_ln46_reg_397_pp0_iter33_reg <= and_ln46_reg_397_pp0_iter32_reg;
                and_ln46_reg_397_pp0_iter34_reg <= and_ln46_reg_397_pp0_iter33_reg;
                and_ln46_reg_397_pp0_iter35_reg <= and_ln46_reg_397_pp0_iter34_reg;
                and_ln46_reg_397_pp0_iter36_reg <= and_ln46_reg_397_pp0_iter35_reg;
                and_ln46_reg_397_pp0_iter37_reg <= and_ln46_reg_397_pp0_iter36_reg;
                and_ln46_reg_397_pp0_iter38_reg <= and_ln46_reg_397_pp0_iter37_reg;
                and_ln46_reg_397_pp0_iter39_reg <= and_ln46_reg_397_pp0_iter38_reg;
                and_ln46_reg_397_pp0_iter3_reg <= and_ln46_reg_397_pp0_iter2_reg;
                and_ln46_reg_397_pp0_iter40_reg <= and_ln46_reg_397_pp0_iter39_reg;
                and_ln46_reg_397_pp0_iter41_reg <= and_ln46_reg_397_pp0_iter40_reg;
                and_ln46_reg_397_pp0_iter42_reg <= and_ln46_reg_397_pp0_iter41_reg;
                and_ln46_reg_397_pp0_iter43_reg <= and_ln46_reg_397_pp0_iter42_reg;
                and_ln46_reg_397_pp0_iter44_reg <= and_ln46_reg_397_pp0_iter43_reg;
                and_ln46_reg_397_pp0_iter4_reg <= and_ln46_reg_397_pp0_iter3_reg;
                and_ln46_reg_397_pp0_iter5_reg <= and_ln46_reg_397_pp0_iter4_reg;
                and_ln46_reg_397_pp0_iter6_reg <= and_ln46_reg_397_pp0_iter5_reg;
                and_ln46_reg_397_pp0_iter7_reg <= and_ln46_reg_397_pp0_iter6_reg;
                and_ln46_reg_397_pp0_iter8_reg <= and_ln46_reg_397_pp0_iter7_reg;
                and_ln46_reg_397_pp0_iter9_reg <= and_ln46_reg_397_pp0_iter8_reg;
                and_ln9_1_reg_432 <= and_ln9_1_fu_292_p2;
                and_ln9_1_reg_432_pp0_iter10_reg <= and_ln9_1_reg_432_pp0_iter9_reg;
                and_ln9_1_reg_432_pp0_iter11_reg <= and_ln9_1_reg_432_pp0_iter10_reg;
                and_ln9_1_reg_432_pp0_iter12_reg <= and_ln9_1_reg_432_pp0_iter11_reg;
                and_ln9_1_reg_432_pp0_iter13_reg <= and_ln9_1_reg_432_pp0_iter12_reg;
                and_ln9_1_reg_432_pp0_iter14_reg <= and_ln9_1_reg_432_pp0_iter13_reg;
                and_ln9_1_reg_432_pp0_iter15_reg <= and_ln9_1_reg_432_pp0_iter14_reg;
                and_ln9_1_reg_432_pp0_iter16_reg <= and_ln9_1_reg_432_pp0_iter15_reg;
                and_ln9_1_reg_432_pp0_iter6_reg <= and_ln9_1_reg_432;
                and_ln9_1_reg_432_pp0_iter7_reg <= and_ln9_1_reg_432_pp0_iter6_reg;
                and_ln9_1_reg_432_pp0_iter8_reg <= and_ln9_1_reg_432_pp0_iter7_reg;
                and_ln9_1_reg_432_pp0_iter9_reg <= and_ln9_1_reg_432_pp0_iter8_reg;
                    ap_predicate_pred1033_state42 <= ((icmp_ln54_reg_410_pp0_iter39_reg = ap_const_lv1_1) and (tmp_2_reg_406_pp0_iter39_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter39_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter39_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter39_reg));
                    ap_predicate_pred1155_state25 <= ((icmp_ln54_reg_410_pp0_iter22_reg = ap_const_lv1_0) and (tmp_2_reg_406_pp0_iter22_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter22_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter22_reg));
                    ap_predicate_pred1160_state25 <= ((icmp_ln54_reg_410_pp0_iter22_reg = ap_const_lv1_1) and (tmp_2_reg_406_pp0_iter22_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter22_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter22_reg));
                    ap_predicate_pred209_state41 <= ((icmp_ln54_reg_410_pp0_iter38_reg = ap_const_lv1_0) and (tmp_2_reg_406_pp0_iter38_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter38_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter38_reg) and (icmp_ln36_reg_389_pp0_iter38_reg = ap_const_lv1_0));
                    ap_predicate_pred219_state41 <= ((icmp_ln54_reg_410_pp0_iter38_reg = ap_const_lv1_1) and (tmp_2_reg_406_pp0_iter38_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter38_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter38_reg) and (icmp_ln36_reg_389_pp0_iter38_reg = ap_const_lv1_0));
                    ap_predicate_pred867_state19 <= ((tmp_2_reg_406_pp0_iter16_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter16_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_reg_436_pp0_iter16_reg) and (ap_const_lv1_0 = and_ln9_1_reg_432_pp0_iter16_reg) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter16_reg));
                din_sign_reg_364_pp0_iter10_reg <= din_sign_reg_364_pp0_iter9_reg;
                din_sign_reg_364_pp0_iter11_reg <= din_sign_reg_364_pp0_iter10_reg;
                din_sign_reg_364_pp0_iter12_reg <= din_sign_reg_364_pp0_iter11_reg;
                din_sign_reg_364_pp0_iter13_reg <= din_sign_reg_364_pp0_iter12_reg;
                din_sign_reg_364_pp0_iter14_reg <= din_sign_reg_364_pp0_iter13_reg;
                din_sign_reg_364_pp0_iter15_reg <= din_sign_reg_364_pp0_iter14_reg;
                din_sign_reg_364_pp0_iter16_reg <= din_sign_reg_364_pp0_iter15_reg;
                din_sign_reg_364_pp0_iter17_reg <= din_sign_reg_364_pp0_iter16_reg;
                din_sign_reg_364_pp0_iter18_reg <= din_sign_reg_364_pp0_iter17_reg;
                din_sign_reg_364_pp0_iter19_reg <= din_sign_reg_364_pp0_iter18_reg;
                din_sign_reg_364_pp0_iter20_reg <= din_sign_reg_364_pp0_iter19_reg;
                din_sign_reg_364_pp0_iter21_reg <= din_sign_reg_364_pp0_iter20_reg;
                din_sign_reg_364_pp0_iter22_reg <= din_sign_reg_364_pp0_iter21_reg;
                din_sign_reg_364_pp0_iter23_reg <= din_sign_reg_364_pp0_iter22_reg;
                din_sign_reg_364_pp0_iter24_reg <= din_sign_reg_364_pp0_iter23_reg;
                din_sign_reg_364_pp0_iter25_reg <= din_sign_reg_364_pp0_iter24_reg;
                din_sign_reg_364_pp0_iter26_reg <= din_sign_reg_364_pp0_iter25_reg;
                din_sign_reg_364_pp0_iter27_reg <= din_sign_reg_364_pp0_iter26_reg;
                din_sign_reg_364_pp0_iter28_reg <= din_sign_reg_364_pp0_iter27_reg;
                din_sign_reg_364_pp0_iter29_reg <= din_sign_reg_364_pp0_iter28_reg;
                din_sign_reg_364_pp0_iter2_reg <= din_sign_reg_364_pp0_iter1_reg;
                din_sign_reg_364_pp0_iter30_reg <= din_sign_reg_364_pp0_iter29_reg;
                din_sign_reg_364_pp0_iter31_reg <= din_sign_reg_364_pp0_iter30_reg;
                din_sign_reg_364_pp0_iter32_reg <= din_sign_reg_364_pp0_iter31_reg;
                din_sign_reg_364_pp0_iter33_reg <= din_sign_reg_364_pp0_iter32_reg;
                din_sign_reg_364_pp0_iter34_reg <= din_sign_reg_364_pp0_iter33_reg;
                din_sign_reg_364_pp0_iter35_reg <= din_sign_reg_364_pp0_iter34_reg;
                din_sign_reg_364_pp0_iter36_reg <= din_sign_reg_364_pp0_iter35_reg;
                din_sign_reg_364_pp0_iter37_reg <= din_sign_reg_364_pp0_iter36_reg;
                din_sign_reg_364_pp0_iter38_reg <= din_sign_reg_364_pp0_iter37_reg;
                din_sign_reg_364_pp0_iter39_reg <= din_sign_reg_364_pp0_iter38_reg;
                din_sign_reg_364_pp0_iter3_reg <= din_sign_reg_364_pp0_iter2_reg;
                din_sign_reg_364_pp0_iter40_reg <= din_sign_reg_364_pp0_iter39_reg;
                din_sign_reg_364_pp0_iter41_reg <= din_sign_reg_364_pp0_iter40_reg;
                din_sign_reg_364_pp0_iter42_reg <= din_sign_reg_364_pp0_iter41_reg;
                din_sign_reg_364_pp0_iter43_reg <= din_sign_reg_364_pp0_iter42_reg;
                din_sign_reg_364_pp0_iter44_reg <= din_sign_reg_364_pp0_iter43_reg;
                din_sign_reg_364_pp0_iter4_reg <= din_sign_reg_364_pp0_iter3_reg;
                din_sign_reg_364_pp0_iter5_reg <= din_sign_reg_364_pp0_iter4_reg;
                din_sign_reg_364_pp0_iter6_reg <= din_sign_reg_364_pp0_iter5_reg;
                din_sign_reg_364_pp0_iter7_reg <= din_sign_reg_364_pp0_iter6_reg;
                din_sign_reg_364_pp0_iter8_reg <= din_sign_reg_364_pp0_iter7_reg;
                din_sign_reg_364_pp0_iter9_reg <= din_sign_reg_364_pp0_iter8_reg;
                expx_reg_60_pp0_iter20_reg <= expx_reg_60;
                expx_reg_60_pp0_iter21_reg <= expx_reg_60_pp0_iter20_reg;
                expx_reg_60_pp0_iter22_reg <= expx_reg_60_pp0_iter21_reg;
                icmp_ln36_reg_389_pp0_iter10_reg <= icmp_ln36_reg_389_pp0_iter9_reg;
                icmp_ln36_reg_389_pp0_iter11_reg <= icmp_ln36_reg_389_pp0_iter10_reg;
                icmp_ln36_reg_389_pp0_iter12_reg <= icmp_ln36_reg_389_pp0_iter11_reg;
                icmp_ln36_reg_389_pp0_iter13_reg <= icmp_ln36_reg_389_pp0_iter12_reg;
                icmp_ln36_reg_389_pp0_iter14_reg <= icmp_ln36_reg_389_pp0_iter13_reg;
                icmp_ln36_reg_389_pp0_iter15_reg <= icmp_ln36_reg_389_pp0_iter14_reg;
                icmp_ln36_reg_389_pp0_iter16_reg <= icmp_ln36_reg_389_pp0_iter15_reg;
                icmp_ln36_reg_389_pp0_iter17_reg <= icmp_ln36_reg_389_pp0_iter16_reg;
                icmp_ln36_reg_389_pp0_iter18_reg <= icmp_ln36_reg_389_pp0_iter17_reg;
                icmp_ln36_reg_389_pp0_iter19_reg <= icmp_ln36_reg_389_pp0_iter18_reg;
                icmp_ln36_reg_389_pp0_iter20_reg <= icmp_ln36_reg_389_pp0_iter19_reg;
                icmp_ln36_reg_389_pp0_iter21_reg <= icmp_ln36_reg_389_pp0_iter20_reg;
                icmp_ln36_reg_389_pp0_iter22_reg <= icmp_ln36_reg_389_pp0_iter21_reg;
                icmp_ln36_reg_389_pp0_iter23_reg <= icmp_ln36_reg_389_pp0_iter22_reg;
                icmp_ln36_reg_389_pp0_iter24_reg <= icmp_ln36_reg_389_pp0_iter23_reg;
                icmp_ln36_reg_389_pp0_iter25_reg <= icmp_ln36_reg_389_pp0_iter24_reg;
                icmp_ln36_reg_389_pp0_iter26_reg <= icmp_ln36_reg_389_pp0_iter25_reg;
                icmp_ln36_reg_389_pp0_iter27_reg <= icmp_ln36_reg_389_pp0_iter26_reg;
                icmp_ln36_reg_389_pp0_iter28_reg <= icmp_ln36_reg_389_pp0_iter27_reg;
                icmp_ln36_reg_389_pp0_iter29_reg <= icmp_ln36_reg_389_pp0_iter28_reg;
                icmp_ln36_reg_389_pp0_iter2_reg <= icmp_ln36_reg_389_pp0_iter1_reg;
                icmp_ln36_reg_389_pp0_iter30_reg <= icmp_ln36_reg_389_pp0_iter29_reg;
                icmp_ln36_reg_389_pp0_iter31_reg <= icmp_ln36_reg_389_pp0_iter30_reg;
                icmp_ln36_reg_389_pp0_iter32_reg <= icmp_ln36_reg_389_pp0_iter31_reg;
                icmp_ln36_reg_389_pp0_iter33_reg <= icmp_ln36_reg_389_pp0_iter32_reg;
                icmp_ln36_reg_389_pp0_iter34_reg <= icmp_ln36_reg_389_pp0_iter33_reg;
                icmp_ln36_reg_389_pp0_iter35_reg <= icmp_ln36_reg_389_pp0_iter34_reg;
                icmp_ln36_reg_389_pp0_iter36_reg <= icmp_ln36_reg_389_pp0_iter35_reg;
                icmp_ln36_reg_389_pp0_iter37_reg <= icmp_ln36_reg_389_pp0_iter36_reg;
                icmp_ln36_reg_389_pp0_iter38_reg <= icmp_ln36_reg_389_pp0_iter37_reg;
                icmp_ln36_reg_389_pp0_iter39_reg <= icmp_ln36_reg_389_pp0_iter38_reg;
                icmp_ln36_reg_389_pp0_iter3_reg <= icmp_ln36_reg_389_pp0_iter2_reg;
                icmp_ln36_reg_389_pp0_iter40_reg <= icmp_ln36_reg_389_pp0_iter39_reg;
                icmp_ln36_reg_389_pp0_iter41_reg <= icmp_ln36_reg_389_pp0_iter40_reg;
                icmp_ln36_reg_389_pp0_iter42_reg <= icmp_ln36_reg_389_pp0_iter41_reg;
                icmp_ln36_reg_389_pp0_iter43_reg <= icmp_ln36_reg_389_pp0_iter42_reg;
                icmp_ln36_reg_389_pp0_iter44_reg <= icmp_ln36_reg_389_pp0_iter43_reg;
                icmp_ln36_reg_389_pp0_iter4_reg <= icmp_ln36_reg_389_pp0_iter3_reg;
                icmp_ln36_reg_389_pp0_iter5_reg <= icmp_ln36_reg_389_pp0_iter4_reg;
                icmp_ln36_reg_389_pp0_iter6_reg <= icmp_ln36_reg_389_pp0_iter5_reg;
                icmp_ln36_reg_389_pp0_iter7_reg <= icmp_ln36_reg_389_pp0_iter6_reg;
                icmp_ln36_reg_389_pp0_iter8_reg <= icmp_ln36_reg_389_pp0_iter7_reg;
                icmp_ln36_reg_389_pp0_iter9_reg <= icmp_ln36_reg_389_pp0_iter8_reg;
                icmp_ln38_reg_401_pp0_iter10_reg <= icmp_ln38_reg_401_pp0_iter9_reg;
                icmp_ln38_reg_401_pp0_iter11_reg <= icmp_ln38_reg_401_pp0_iter10_reg;
                icmp_ln38_reg_401_pp0_iter12_reg <= icmp_ln38_reg_401_pp0_iter11_reg;
                icmp_ln38_reg_401_pp0_iter13_reg <= icmp_ln38_reg_401_pp0_iter12_reg;
                icmp_ln38_reg_401_pp0_iter14_reg <= icmp_ln38_reg_401_pp0_iter13_reg;
                icmp_ln38_reg_401_pp0_iter15_reg <= icmp_ln38_reg_401_pp0_iter14_reg;
                icmp_ln38_reg_401_pp0_iter16_reg <= icmp_ln38_reg_401_pp0_iter15_reg;
                icmp_ln38_reg_401_pp0_iter17_reg <= icmp_ln38_reg_401_pp0_iter16_reg;
                icmp_ln38_reg_401_pp0_iter18_reg <= icmp_ln38_reg_401_pp0_iter17_reg;
                icmp_ln38_reg_401_pp0_iter19_reg <= icmp_ln38_reg_401_pp0_iter18_reg;
                icmp_ln38_reg_401_pp0_iter20_reg <= icmp_ln38_reg_401_pp0_iter19_reg;
                icmp_ln38_reg_401_pp0_iter21_reg <= icmp_ln38_reg_401_pp0_iter20_reg;
                icmp_ln38_reg_401_pp0_iter22_reg <= icmp_ln38_reg_401_pp0_iter21_reg;
                icmp_ln38_reg_401_pp0_iter23_reg <= icmp_ln38_reg_401_pp0_iter22_reg;
                icmp_ln38_reg_401_pp0_iter24_reg <= icmp_ln38_reg_401_pp0_iter23_reg;
                icmp_ln38_reg_401_pp0_iter25_reg <= icmp_ln38_reg_401_pp0_iter24_reg;
                icmp_ln38_reg_401_pp0_iter26_reg <= icmp_ln38_reg_401_pp0_iter25_reg;
                icmp_ln38_reg_401_pp0_iter27_reg <= icmp_ln38_reg_401_pp0_iter26_reg;
                icmp_ln38_reg_401_pp0_iter28_reg <= icmp_ln38_reg_401_pp0_iter27_reg;
                icmp_ln38_reg_401_pp0_iter29_reg <= icmp_ln38_reg_401_pp0_iter28_reg;
                icmp_ln38_reg_401_pp0_iter2_reg <= icmp_ln38_reg_401_pp0_iter1_reg;
                icmp_ln38_reg_401_pp0_iter30_reg <= icmp_ln38_reg_401_pp0_iter29_reg;
                icmp_ln38_reg_401_pp0_iter31_reg <= icmp_ln38_reg_401_pp0_iter30_reg;
                icmp_ln38_reg_401_pp0_iter32_reg <= icmp_ln38_reg_401_pp0_iter31_reg;
                icmp_ln38_reg_401_pp0_iter33_reg <= icmp_ln38_reg_401_pp0_iter32_reg;
                icmp_ln38_reg_401_pp0_iter34_reg <= icmp_ln38_reg_401_pp0_iter33_reg;
                icmp_ln38_reg_401_pp0_iter35_reg <= icmp_ln38_reg_401_pp0_iter34_reg;
                icmp_ln38_reg_401_pp0_iter36_reg <= icmp_ln38_reg_401_pp0_iter35_reg;
                icmp_ln38_reg_401_pp0_iter37_reg <= icmp_ln38_reg_401_pp0_iter36_reg;
                icmp_ln38_reg_401_pp0_iter38_reg <= icmp_ln38_reg_401_pp0_iter37_reg;
                icmp_ln38_reg_401_pp0_iter39_reg <= icmp_ln38_reg_401_pp0_iter38_reg;
                icmp_ln38_reg_401_pp0_iter3_reg <= icmp_ln38_reg_401_pp0_iter2_reg;
                icmp_ln38_reg_401_pp0_iter40_reg <= icmp_ln38_reg_401_pp0_iter39_reg;
                icmp_ln38_reg_401_pp0_iter41_reg <= icmp_ln38_reg_401_pp0_iter40_reg;
                icmp_ln38_reg_401_pp0_iter42_reg <= icmp_ln38_reg_401_pp0_iter41_reg;
                icmp_ln38_reg_401_pp0_iter43_reg <= icmp_ln38_reg_401_pp0_iter42_reg;
                icmp_ln38_reg_401_pp0_iter4_reg <= icmp_ln38_reg_401_pp0_iter3_reg;
                icmp_ln38_reg_401_pp0_iter5_reg <= icmp_ln38_reg_401_pp0_iter4_reg;
                icmp_ln38_reg_401_pp0_iter6_reg <= icmp_ln38_reg_401_pp0_iter5_reg;
                icmp_ln38_reg_401_pp0_iter7_reg <= icmp_ln38_reg_401_pp0_iter6_reg;
                icmp_ln38_reg_401_pp0_iter8_reg <= icmp_ln38_reg_401_pp0_iter7_reg;
                icmp_ln38_reg_401_pp0_iter9_reg <= icmp_ln38_reg_401_pp0_iter8_reg;
                icmp_ln45_reg_393_pp0_iter10_reg <= icmp_ln45_reg_393_pp0_iter9_reg;
                icmp_ln45_reg_393_pp0_iter11_reg <= icmp_ln45_reg_393_pp0_iter10_reg;
                icmp_ln45_reg_393_pp0_iter12_reg <= icmp_ln45_reg_393_pp0_iter11_reg;
                icmp_ln45_reg_393_pp0_iter13_reg <= icmp_ln45_reg_393_pp0_iter12_reg;
                icmp_ln45_reg_393_pp0_iter14_reg <= icmp_ln45_reg_393_pp0_iter13_reg;
                icmp_ln45_reg_393_pp0_iter15_reg <= icmp_ln45_reg_393_pp0_iter14_reg;
                icmp_ln45_reg_393_pp0_iter16_reg <= icmp_ln45_reg_393_pp0_iter15_reg;
                icmp_ln45_reg_393_pp0_iter17_reg <= icmp_ln45_reg_393_pp0_iter16_reg;
                icmp_ln45_reg_393_pp0_iter18_reg <= icmp_ln45_reg_393_pp0_iter17_reg;
                icmp_ln45_reg_393_pp0_iter19_reg <= icmp_ln45_reg_393_pp0_iter18_reg;
                icmp_ln45_reg_393_pp0_iter20_reg <= icmp_ln45_reg_393_pp0_iter19_reg;
                icmp_ln45_reg_393_pp0_iter21_reg <= icmp_ln45_reg_393_pp0_iter20_reg;
                icmp_ln45_reg_393_pp0_iter22_reg <= icmp_ln45_reg_393_pp0_iter21_reg;
                icmp_ln45_reg_393_pp0_iter23_reg <= icmp_ln45_reg_393_pp0_iter22_reg;
                icmp_ln45_reg_393_pp0_iter24_reg <= icmp_ln45_reg_393_pp0_iter23_reg;
                icmp_ln45_reg_393_pp0_iter25_reg <= icmp_ln45_reg_393_pp0_iter24_reg;
                icmp_ln45_reg_393_pp0_iter26_reg <= icmp_ln45_reg_393_pp0_iter25_reg;
                icmp_ln45_reg_393_pp0_iter27_reg <= icmp_ln45_reg_393_pp0_iter26_reg;
                icmp_ln45_reg_393_pp0_iter28_reg <= icmp_ln45_reg_393_pp0_iter27_reg;
                icmp_ln45_reg_393_pp0_iter29_reg <= icmp_ln45_reg_393_pp0_iter28_reg;
                icmp_ln45_reg_393_pp0_iter2_reg <= icmp_ln45_reg_393_pp0_iter1_reg;
                icmp_ln45_reg_393_pp0_iter30_reg <= icmp_ln45_reg_393_pp0_iter29_reg;
                icmp_ln45_reg_393_pp0_iter31_reg <= icmp_ln45_reg_393_pp0_iter30_reg;
                icmp_ln45_reg_393_pp0_iter32_reg <= icmp_ln45_reg_393_pp0_iter31_reg;
                icmp_ln45_reg_393_pp0_iter33_reg <= icmp_ln45_reg_393_pp0_iter32_reg;
                icmp_ln45_reg_393_pp0_iter34_reg <= icmp_ln45_reg_393_pp0_iter33_reg;
                icmp_ln45_reg_393_pp0_iter35_reg <= icmp_ln45_reg_393_pp0_iter34_reg;
                icmp_ln45_reg_393_pp0_iter36_reg <= icmp_ln45_reg_393_pp0_iter35_reg;
                icmp_ln45_reg_393_pp0_iter37_reg <= icmp_ln45_reg_393_pp0_iter36_reg;
                icmp_ln45_reg_393_pp0_iter38_reg <= icmp_ln45_reg_393_pp0_iter37_reg;
                icmp_ln45_reg_393_pp0_iter39_reg <= icmp_ln45_reg_393_pp0_iter38_reg;
                icmp_ln45_reg_393_pp0_iter3_reg <= icmp_ln45_reg_393_pp0_iter2_reg;
                icmp_ln45_reg_393_pp0_iter40_reg <= icmp_ln45_reg_393_pp0_iter39_reg;
                icmp_ln45_reg_393_pp0_iter41_reg <= icmp_ln45_reg_393_pp0_iter40_reg;
                icmp_ln45_reg_393_pp0_iter42_reg <= icmp_ln45_reg_393_pp0_iter41_reg;
                icmp_ln45_reg_393_pp0_iter43_reg <= icmp_ln45_reg_393_pp0_iter42_reg;
                icmp_ln45_reg_393_pp0_iter44_reg <= icmp_ln45_reg_393_pp0_iter43_reg;
                icmp_ln45_reg_393_pp0_iter4_reg <= icmp_ln45_reg_393_pp0_iter3_reg;
                icmp_ln45_reg_393_pp0_iter5_reg <= icmp_ln45_reg_393_pp0_iter4_reg;
                icmp_ln45_reg_393_pp0_iter6_reg <= icmp_ln45_reg_393_pp0_iter5_reg;
                icmp_ln45_reg_393_pp0_iter7_reg <= icmp_ln45_reg_393_pp0_iter6_reg;
                icmp_ln45_reg_393_pp0_iter8_reg <= icmp_ln45_reg_393_pp0_iter7_reg;
                icmp_ln45_reg_393_pp0_iter9_reg <= icmp_ln45_reg_393_pp0_iter8_reg;
                icmp_ln54_reg_410_pp0_iter10_reg <= icmp_ln54_reg_410_pp0_iter9_reg;
                icmp_ln54_reg_410_pp0_iter11_reg <= icmp_ln54_reg_410_pp0_iter10_reg;
                icmp_ln54_reg_410_pp0_iter12_reg <= icmp_ln54_reg_410_pp0_iter11_reg;
                icmp_ln54_reg_410_pp0_iter13_reg <= icmp_ln54_reg_410_pp0_iter12_reg;
                icmp_ln54_reg_410_pp0_iter14_reg <= icmp_ln54_reg_410_pp0_iter13_reg;
                icmp_ln54_reg_410_pp0_iter15_reg <= icmp_ln54_reg_410_pp0_iter14_reg;
                icmp_ln54_reg_410_pp0_iter16_reg <= icmp_ln54_reg_410_pp0_iter15_reg;
                icmp_ln54_reg_410_pp0_iter17_reg <= icmp_ln54_reg_410_pp0_iter16_reg;
                icmp_ln54_reg_410_pp0_iter18_reg <= icmp_ln54_reg_410_pp0_iter17_reg;
                icmp_ln54_reg_410_pp0_iter19_reg <= icmp_ln54_reg_410_pp0_iter18_reg;
                icmp_ln54_reg_410_pp0_iter20_reg <= icmp_ln54_reg_410_pp0_iter19_reg;
                icmp_ln54_reg_410_pp0_iter21_reg <= icmp_ln54_reg_410_pp0_iter20_reg;
                icmp_ln54_reg_410_pp0_iter22_reg <= icmp_ln54_reg_410_pp0_iter21_reg;
                icmp_ln54_reg_410_pp0_iter23_reg <= icmp_ln54_reg_410_pp0_iter22_reg;
                icmp_ln54_reg_410_pp0_iter24_reg <= icmp_ln54_reg_410_pp0_iter23_reg;
                icmp_ln54_reg_410_pp0_iter25_reg <= icmp_ln54_reg_410_pp0_iter24_reg;
                icmp_ln54_reg_410_pp0_iter26_reg <= icmp_ln54_reg_410_pp0_iter25_reg;
                icmp_ln54_reg_410_pp0_iter27_reg <= icmp_ln54_reg_410_pp0_iter26_reg;
                icmp_ln54_reg_410_pp0_iter28_reg <= icmp_ln54_reg_410_pp0_iter27_reg;
                icmp_ln54_reg_410_pp0_iter29_reg <= icmp_ln54_reg_410_pp0_iter28_reg;
                icmp_ln54_reg_410_pp0_iter2_reg <= icmp_ln54_reg_410;
                icmp_ln54_reg_410_pp0_iter30_reg <= icmp_ln54_reg_410_pp0_iter29_reg;
                icmp_ln54_reg_410_pp0_iter31_reg <= icmp_ln54_reg_410_pp0_iter30_reg;
                icmp_ln54_reg_410_pp0_iter32_reg <= icmp_ln54_reg_410_pp0_iter31_reg;
                icmp_ln54_reg_410_pp0_iter33_reg <= icmp_ln54_reg_410_pp0_iter32_reg;
                icmp_ln54_reg_410_pp0_iter34_reg <= icmp_ln54_reg_410_pp0_iter33_reg;
                icmp_ln54_reg_410_pp0_iter35_reg <= icmp_ln54_reg_410_pp0_iter34_reg;
                icmp_ln54_reg_410_pp0_iter36_reg <= icmp_ln54_reg_410_pp0_iter35_reg;
                icmp_ln54_reg_410_pp0_iter37_reg <= icmp_ln54_reg_410_pp0_iter36_reg;
                icmp_ln54_reg_410_pp0_iter38_reg <= icmp_ln54_reg_410_pp0_iter37_reg;
                icmp_ln54_reg_410_pp0_iter39_reg <= icmp_ln54_reg_410_pp0_iter38_reg;
                icmp_ln54_reg_410_pp0_iter3_reg <= icmp_ln54_reg_410_pp0_iter2_reg;
                icmp_ln54_reg_410_pp0_iter40_reg <= icmp_ln54_reg_410_pp0_iter39_reg;
                icmp_ln54_reg_410_pp0_iter41_reg <= icmp_ln54_reg_410_pp0_iter40_reg;
                icmp_ln54_reg_410_pp0_iter42_reg <= icmp_ln54_reg_410_pp0_iter41_reg;
                icmp_ln54_reg_410_pp0_iter43_reg <= icmp_ln54_reg_410_pp0_iter42_reg;
                icmp_ln54_reg_410_pp0_iter44_reg <= icmp_ln54_reg_410_pp0_iter43_reg;
                icmp_ln54_reg_410_pp0_iter4_reg <= icmp_ln54_reg_410_pp0_iter3_reg;
                icmp_ln54_reg_410_pp0_iter5_reg <= icmp_ln54_reg_410_pp0_iter4_reg;
                icmp_ln54_reg_410_pp0_iter6_reg <= icmp_ln54_reg_410_pp0_iter5_reg;
                icmp_ln54_reg_410_pp0_iter7_reg <= icmp_ln54_reg_410_pp0_iter6_reg;
                icmp_ln54_reg_410_pp0_iter8_reg <= icmp_ln54_reg_410_pp0_iter7_reg;
                icmp_ln54_reg_410_pp0_iter9_reg <= icmp_ln54_reg_410_pp0_iter8_reg;
                tmp_2_reg_406_pp0_iter10_reg <= tmp_2_reg_406_pp0_iter9_reg;
                tmp_2_reg_406_pp0_iter11_reg <= tmp_2_reg_406_pp0_iter10_reg;
                tmp_2_reg_406_pp0_iter12_reg <= tmp_2_reg_406_pp0_iter11_reg;
                tmp_2_reg_406_pp0_iter13_reg <= tmp_2_reg_406_pp0_iter12_reg;
                tmp_2_reg_406_pp0_iter14_reg <= tmp_2_reg_406_pp0_iter13_reg;
                tmp_2_reg_406_pp0_iter15_reg <= tmp_2_reg_406_pp0_iter14_reg;
                tmp_2_reg_406_pp0_iter16_reg <= tmp_2_reg_406_pp0_iter15_reg;
                tmp_2_reg_406_pp0_iter17_reg <= tmp_2_reg_406_pp0_iter16_reg;
                tmp_2_reg_406_pp0_iter18_reg <= tmp_2_reg_406_pp0_iter17_reg;
                tmp_2_reg_406_pp0_iter19_reg <= tmp_2_reg_406_pp0_iter18_reg;
                tmp_2_reg_406_pp0_iter20_reg <= tmp_2_reg_406_pp0_iter19_reg;
                tmp_2_reg_406_pp0_iter21_reg <= tmp_2_reg_406_pp0_iter20_reg;
                tmp_2_reg_406_pp0_iter22_reg <= tmp_2_reg_406_pp0_iter21_reg;
                tmp_2_reg_406_pp0_iter23_reg <= tmp_2_reg_406_pp0_iter22_reg;
                tmp_2_reg_406_pp0_iter24_reg <= tmp_2_reg_406_pp0_iter23_reg;
                tmp_2_reg_406_pp0_iter25_reg <= tmp_2_reg_406_pp0_iter24_reg;
                tmp_2_reg_406_pp0_iter26_reg <= tmp_2_reg_406_pp0_iter25_reg;
                tmp_2_reg_406_pp0_iter27_reg <= tmp_2_reg_406_pp0_iter26_reg;
                tmp_2_reg_406_pp0_iter28_reg <= tmp_2_reg_406_pp0_iter27_reg;
                tmp_2_reg_406_pp0_iter29_reg <= tmp_2_reg_406_pp0_iter28_reg;
                tmp_2_reg_406_pp0_iter2_reg <= tmp_2_reg_406;
                tmp_2_reg_406_pp0_iter30_reg <= tmp_2_reg_406_pp0_iter29_reg;
                tmp_2_reg_406_pp0_iter31_reg <= tmp_2_reg_406_pp0_iter30_reg;
                tmp_2_reg_406_pp0_iter32_reg <= tmp_2_reg_406_pp0_iter31_reg;
                tmp_2_reg_406_pp0_iter33_reg <= tmp_2_reg_406_pp0_iter32_reg;
                tmp_2_reg_406_pp0_iter34_reg <= tmp_2_reg_406_pp0_iter33_reg;
                tmp_2_reg_406_pp0_iter35_reg <= tmp_2_reg_406_pp0_iter34_reg;
                tmp_2_reg_406_pp0_iter36_reg <= tmp_2_reg_406_pp0_iter35_reg;
                tmp_2_reg_406_pp0_iter37_reg <= tmp_2_reg_406_pp0_iter36_reg;
                tmp_2_reg_406_pp0_iter38_reg <= tmp_2_reg_406_pp0_iter37_reg;
                tmp_2_reg_406_pp0_iter39_reg <= tmp_2_reg_406_pp0_iter38_reg;
                tmp_2_reg_406_pp0_iter3_reg <= tmp_2_reg_406_pp0_iter2_reg;
                tmp_2_reg_406_pp0_iter40_reg <= tmp_2_reg_406_pp0_iter39_reg;
                tmp_2_reg_406_pp0_iter41_reg <= tmp_2_reg_406_pp0_iter40_reg;
                tmp_2_reg_406_pp0_iter42_reg <= tmp_2_reg_406_pp0_iter41_reg;
                tmp_2_reg_406_pp0_iter43_reg <= tmp_2_reg_406_pp0_iter42_reg;
                tmp_2_reg_406_pp0_iter44_reg <= tmp_2_reg_406_pp0_iter43_reg;
                tmp_2_reg_406_pp0_iter4_reg <= tmp_2_reg_406_pp0_iter3_reg;
                tmp_2_reg_406_pp0_iter5_reg <= tmp_2_reg_406_pp0_iter4_reg;
                tmp_2_reg_406_pp0_iter6_reg <= tmp_2_reg_406_pp0_iter5_reg;
                tmp_2_reg_406_pp0_iter7_reg <= tmp_2_reg_406_pp0_iter6_reg;
                tmp_2_reg_406_pp0_iter8_reg <= tmp_2_reg_406_pp0_iter7_reg;
                tmp_2_reg_406_pp0_iter9_reg <= tmp_2_reg_406_pp0_iter8_reg;
                tmp_s_reg_445 <= grp_exp_generic_double_s_fu_89_ap_return;
                x_3_reg_425 <= x_3_fu_245_p3;
                xor_ln66_reg_460 <= xor_ln66_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_expx_reg_60 <= ap_phi_reg_pp0_iter9_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_expx_reg_60 <= ap_phi_reg_pp0_iter10_expx_reg_60;
                ap_phi_reg_pp0_iter11_resultf_3_reg_72 <= ap_phi_reg_pp0_iter10_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_expx_reg_60 <= ap_phi_reg_pp0_iter11_expx_reg_60;
                ap_phi_reg_pp0_iter12_resultf_3_reg_72 <= ap_phi_reg_pp0_iter11_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_expx_reg_60 <= ap_phi_reg_pp0_iter12_expx_reg_60;
                ap_phi_reg_pp0_iter13_resultf_3_reg_72 <= ap_phi_reg_pp0_iter12_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_expx_reg_60 <= ap_phi_reg_pp0_iter13_expx_reg_60;
                ap_phi_reg_pp0_iter14_resultf_3_reg_72 <= ap_phi_reg_pp0_iter13_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_expx_reg_60 <= ap_phi_reg_pp0_iter14_expx_reg_60;
                ap_phi_reg_pp0_iter15_resultf_3_reg_72 <= ap_phi_reg_pp0_iter14_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_expx_reg_60 <= ap_phi_reg_pp0_iter15_expx_reg_60;
                ap_phi_reg_pp0_iter16_resultf_3_reg_72 <= ap_phi_reg_pp0_iter15_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_expx_reg_60 <= ap_phi_reg_pp0_iter16_expx_reg_60;
                ap_phi_reg_pp0_iter17_resultf_3_reg_72 <= ap_phi_reg_pp0_iter16_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_expx_reg_60 <= ap_phi_reg_pp0_iter17_expx_reg_60;
                ap_phi_reg_pp0_iter18_resultf_3_reg_72 <= ap_phi_reg_pp0_iter17_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_resultf_3_reg_72 <= ap_phi_reg_pp0_iter18_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_expx_reg_60 <= ap_phi_reg_pp0_iter0_expx_reg_60;
                ap_phi_reg_pp0_iter1_resultf_3_reg_72 <= ap_phi_reg_pp0_iter0_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_resultf_3_reg_72 <= ap_phi_reg_pp0_iter19_resultf_3_reg_72;
                expx_reg_60 <= ap_phi_reg_pp0_iter19_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_resultf_3_reg_72 <= ap_phi_reg_pp0_iter20_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_resultf_3_reg_72 <= ap_phi_reg_pp0_iter21_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_resultf_3_reg_72 <= ap_phi_reg_pp0_iter22_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_resultf_3_reg_72 <= ap_phi_reg_pp0_iter23_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_resultf_3_reg_72 <= ap_phi_reg_pp0_iter24_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_resultf_3_reg_72 <= ap_phi_reg_pp0_iter25_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_resultf_3_reg_72 <= ap_phi_reg_pp0_iter26_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter28_resultf_3_reg_72 <= ap_phi_reg_pp0_iter27_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter29_resultf_3_reg_72 <= ap_phi_reg_pp0_iter28_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_expx_reg_60 <= ap_phi_reg_pp0_iter1_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter30_resultf_3_reg_72 <= ap_phi_reg_pp0_iter29_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter31_resultf_3_reg_72 <= ap_phi_reg_pp0_iter30_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter32_resultf_3_reg_72 <= ap_phi_reg_pp0_iter31_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter32 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter33_resultf_3_reg_72 <= ap_phi_reg_pp0_iter32_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter34_resultf_3_reg_72 <= ap_phi_reg_pp0_iter33_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter34 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter35_resultf_3_reg_72 <= ap_phi_reg_pp0_iter34_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter35 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter36_resultf_3_reg_72 <= ap_phi_reg_pp0_iter35_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter36 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter37_resultf_3_reg_72 <= ap_phi_reg_pp0_iter36_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter37 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter38_resultf_3_reg_72 <= ap_phi_reg_pp0_iter37_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter39_resultf_3_reg_72 <= ap_phi_reg_pp0_iter38_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_expx_reg_60 <= ap_phi_reg_pp0_iter2_expx_reg_60;
                ap_phi_reg_pp0_iter3_resultf_3_reg_72 <= ap_phi_reg_pp0_iter2_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter40_resultf_3_reg_72 <= ap_phi_reg_pp0_iter39_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter41_resultf_3_reg_72 <= ap_phi_reg_pp0_iter40_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter43_resultf_3_reg_72 <= ap_phi_reg_pp0_iter42_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter44_resultf_3_reg_72 <= ap_phi_reg_pp0_iter43_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_expx_reg_60 <= ap_phi_reg_pp0_iter3_expx_reg_60;
                ap_phi_reg_pp0_iter4_resultf_3_reg_72 <= ap_phi_reg_pp0_iter3_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_expx_reg_60 <= ap_phi_reg_pp0_iter4_expx_reg_60;
                ap_phi_reg_pp0_iter5_resultf_3_reg_72 <= ap_phi_reg_pp0_iter4_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_resultf_3_reg_72 <= ap_phi_reg_pp0_iter5_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_expx_reg_60 <= ap_phi_reg_pp0_iter6_expx_reg_60;
                ap_phi_reg_pp0_iter7_resultf_3_reg_72 <= ap_phi_reg_pp0_iter6_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_expx_reg_60 <= ap_phi_reg_pp0_iter7_expx_reg_60;
                ap_phi_reg_pp0_iter8_resultf_3_reg_72 <= ap_phi_reg_pp0_iter7_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_expx_reg_60 <= ap_phi_reg_pp0_iter8_expx_reg_60;
                ap_phi_reg_pp0_iter9_resultf_3_reg_72 <= ap_phi_reg_pp0_iter8_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_predicate_pred219_state41 = ap_const_boolean_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1)) or ((ap_predicate_pred209_state41 = ap_const_boolean_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1)))) then
                reg_144 <= grp_fu_134_p2;
            end if;
        end if;
    end process;
    t_reg_374(63) <= '0';
    abst_in_reg_379(63) <= '0';
    abst_in_reg_379_pp0_iter1_reg(63) <= '0';
    abst_in_reg_379_pp0_iter2_reg(63) <= '0';
    abst_in_reg_379_pp0_iter3_reg(63) <= '0';
    abst_in_reg_379_pp0_iter4_reg(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abst_in_fu_188_p1 <= t_fu_180_p3;
    and_ln10_1_fu_316_p2 <= (icmp_ln10_fu_304_p2 and and_ln10_fu_310_p2);
    and_ln10_fu_310_p2 <= (xor_ln10_fu_298_p2 and icmp_ln9_1_fu_280_p2);
    and_ln46_fu_218_p2 <= (icmp_ln46_fu_206_p2 and icmp_ln46_1_fu_212_p2);
    and_ln9_1_fu_292_p2 <= (xs_sign_fu_256_p3 and and_ln9_fu_286_p2);
    and_ln9_fu_286_p2 <= (icmp_ln9_fu_274_p2 and icmp_ln9_1_fu_280_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp101 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_condition_1003_assign_proc : process(ap_enable_reg_pp0_iter41, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1003 <= ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1));
    end process;


    ap_condition_1015_assign_proc : process(ap_enable_reg_pp0_iter44, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1015 <= ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter44 = ap_const_logic_1));
    end process;


    ap_condition_1020_assign_proc : process(icmp_ln36_reg_389_pp0_iter8_reg, icmp_ln45_reg_393_pp0_iter8_reg, and_ln46_reg_397_pp0_iter8_reg)
    begin
                ap_condition_1020 <= (((icmp_ln36_reg_389_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln46_reg_397_pp0_iter8_reg)) or ((icmp_ln45_reg_393_pp0_iter8_reg = ap_const_lv1_1) and (icmp_ln36_reg_389_pp0_iter8_reg = ap_const_lv1_0)));
    end process;


    ap_condition_1068_assign_proc : process(icmp_ln36_reg_389, icmp_ln45_reg_393, and_ln46_reg_397, grp_fu_139_p2)
    begin
                ap_condition_1068 <= ((grp_fu_139_p2 = ap_const_lv1_0) and (icmp_ln45_reg_393 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397) and (icmp_ln36_reg_389 = ap_const_lv1_0));
    end process;


    ap_condition_788_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_788 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_820_assign_proc : process(ap_enable_reg_pp0_iter9, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_820 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_856_assign_proc : process(ap_enable_reg_pp0_iter18, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_856 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter45, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter45 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to44_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to44 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_resultf_3_phi_fu_76_p10_assign_proc : process(icmp_ln36_reg_389_pp0_iter44_reg, icmp_ln45_reg_393_pp0_iter44_reg, and_ln46_reg_397_pp0_iter44_reg, tmp_2_reg_406_pp0_iter44_reg, icmp_ln54_reg_410_pp0_iter44_reg, ap_phi_reg_pp0_iter45_resultf_3_reg_72, grp_fu_124_p2)
    begin
        if (((icmp_ln54_reg_410_pp0_iter44_reg = ap_const_lv1_0) and (tmp_2_reg_406_pp0_iter44_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter44_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter44_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter44_reg))) then 
            ap_phi_mux_resultf_3_phi_fu_76_p10 <= grp_fu_124_p2;
        else 
            ap_phi_mux_resultf_3_phi_fu_76_p10 <= ap_phi_reg_pp0_iter45_resultf_3_reg_72;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_expx_reg_60 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_resultf_3_reg_72 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op101_call_state7_assign_proc : process(icmp_ln36_reg_389_pp0_iter5_reg, icmp_ln45_reg_393_pp0_iter5_reg, and_ln46_reg_397_pp0_iter5_reg, tmp_2_reg_406_pp0_iter5_reg, and_ln9_1_reg_432, and_ln10_1_reg_436)
    begin
                ap_predicate_op101_call_state7 <= ((tmp_2_reg_406_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_reg_436) and (ap_const_lv1_0 = and_ln9_1_reg_432) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter5_reg));
    end process;


    ap_predicate_op101_call_state7_state6_assign_proc : process(icmp_ln36_reg_389_pp0_iter4_reg, icmp_ln45_reg_393_pp0_iter4_reg, and_ln46_reg_397_pp0_iter4_reg, tmp_2_reg_406_pp0_iter4_reg, and_ln9_1_fu_292_p2, and_ln10_1_fu_316_p2)
    begin
                ap_predicate_op101_call_state7_state6 <= ((tmp_2_reg_406_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln45_reg_393_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln36_reg_389_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_fu_316_p2) and (ap_const_lv1_0 = and_ln9_1_fu_292_p2) and (ap_const_lv1_0 = and_ln46_reg_397_pp0_iter4_reg));
    end process;


    ap_predicate_op63_dcmp_state1_assign_proc : process(icmp_ln36_fu_194_p2, icmp_ln45_fu_200_p2, and_ln46_fu_218_p2)
    begin
                ap_predicate_op63_dcmp_state1 <= ((icmp_ln45_fu_200_p2 = ap_const_lv1_0) and (icmp_ln36_fu_194_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_218_p2));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to44)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to44 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        bitcast_ln83_1_fu_353_p1 when (din_sign_reg_364_pp0_iter44_reg(0) = '1') else 
        ap_phi_mux_resultf_3_phi_fu_76_p10;
    bitcast_ln66_1_fu_332_p1 <= xor_ln66_reg_460;
    bitcast_ln66_fu_322_p1 <= expx_reg_60_pp0_iter22_reg;
    bitcast_ln83_1_fu_353_p1 <= xor_ln83_fu_347_p2;
    bitcast_ln83_fu_343_p1 <= ap_phi_mux_resultf_3_phi_fu_76_p10;
    data_1_fu_252_p1 <= x_3_fu_245_p3;
    data_fu_150_p1 <= t_in;
    din_exp_fu_162_p4 <= data_fu_150_p1(62 downto 52);
    din_sig_fu_172_p1 <= data_fu_150_p1(52 - 1 downto 0);

    grp_exp_generic_double_s_fu_89_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp101)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp101))) then 
            grp_exp_generic_double_s_fu_89_ap_ce <= ap_const_logic_1;
        else 
            grp_exp_generic_double_s_fu_89_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_generic_double_s_fu_89_ap_start <= grp_exp_generic_double_s_fu_89_ap_start_reg;

    grp_fu_100_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_100_ce <= ap_const_logic_1;
        else 
            grp_fu_100_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_105_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_105_ce <= ap_const_logic_1;
        else 
            grp_fu_105_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_105_p0 <= or_ln55_fu_235_p2;

    grp_fu_109_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_109_ce <= ap_const_logic_1;
        else 
            grp_fu_109_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_113_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_113_ce <= ap_const_logic_1;
        else 
            grp_fu_113_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_118_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_118_ce <= ap_const_logic_1;
        else 
            grp_fu_118_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_124_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_124_ce <= ap_const_logic_1;
        else 
            grp_fu_124_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_130_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_130_ce <= ap_const_logic_1;
        else 
            grp_fu_130_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_134_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_134_ce <= ap_const_logic_1;
        else 
            grp_fu_134_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_134_p0_assign_proc : process(ap_enable_reg_pp0_iter24, bitcast_ln66_1_fu_332_p1, ap_block_pp0_stage0, ap_predicate_pred1155_state25, ap_predicate_pred1160_state25)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_predicate_pred1160_state25 = ap_const_boolean_1)) then 
                grp_fu_134_p0 <= bitcast_ln66_1_fu_332_p1;
            elsif ((ap_predicate_pred1155_state25 = ap_const_boolean_1)) then 
                grp_fu_134_p0 <= ap_const_lv64_4000000000000000;
            else 
                grp_fu_134_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_134_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_139_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_139_ce <= ap_const_logic_1;
        else 
            grp_fu_139_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_fu_304_p2 <= "1" when (unsigned(xs_exp_1_fu_264_p4) < unsigned(ap_const_lv11_3E5)) else "0";
    icmp_ln36_fu_194_p2 <= "1" when (din_exp_fu_162_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln38_fu_224_p2 <= "0" when (din_sig_fu_172_p1 = ap_const_lv52_0) else "1";
    icmp_ln45_fu_200_p2 <= "1" when (unsigned(din_exp_fu_162_p4) < unsigned(ap_const_lv11_3C8)) else "0";
    icmp_ln46_1_fu_212_p2 <= "1" when (din_sig_fu_172_p1 = ap_const_lv52_0) else "0";
    icmp_ln46_fu_206_p2 <= "1" when (din_exp_fu_162_p4 = ap_const_lv11_3C8) else "0";
    icmp_ln54_fu_230_p2 <= "1" when (unsigned(din_exp_reg_369) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln9_1_fu_280_p2 <= "0" when (xs_exp_1_fu_264_p4 = ap_const_lv11_0) else "1";
    icmp_ln9_fu_274_p2 <= "1" when (unsigned(xs_exp_1_fu_264_p4) < unsigned(ap_const_lv11_3E4)) else "0";
    or_ln55_fu_235_p2 <= (t_reg_374 or ap_const_lv64_8000000000000000);
    select_ln38_fu_336_p3 <= 
        ap_const_lv64_7FFFFFFFFFFFFFFF when (icmp_ln38_reg_401_pp0_iter43_reg(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    t_fu_180_p3 <= (ap_const_lv1_0 & trunc_ln479_fu_176_p1);
    trunc_ln479_fu_176_p1 <= data_fu_150_p1(63 - 1 downto 0);
    x_3_fu_245_p3 <= 
        grp_fu_105_p2 when (icmp_ln54_reg_410_pp0_iter4_reg(0) = '1') else 
        grp_fu_109_p2;
    xor_ln10_fu_298_p2 <= (xs_sign_fu_256_p3 xor ap_const_lv1_1);
    xor_ln66_fu_326_p2 <= (bitcast_ln66_fu_322_p1 xor ap_const_lv64_8000000000000000);
    xor_ln83_fu_347_p2 <= (bitcast_ln83_fu_343_p1 xor ap_const_lv64_8000000000000000);
    xs_exp_1_fu_264_p4 <= data_1_fu_252_p1(62 downto 52);
    xs_sign_fu_256_p3 <= data_1_fu_252_p1(63 downto 63);
end behav;
